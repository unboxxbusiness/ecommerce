rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Products can be read by anyone, but only written by an admin.
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth.token.email == resource.data.adminEmail; 
    }

    // Customers can only manage their own document. Admins have full access.
    match /customers/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create, delete: if request.auth.token.email == resource.data.adminEmail;
    }

    // Users can create orders and read their own orders. Admins have full access.
    match /orders/{orderId} {
      allow create: if request.auth.uid != null && request.resource.data.customerEmail == request.auth.token.email;
      allow read: if request.resource.data.customerEmail == request.auth.token.email || request.auth.token.email == resource.data.adminEmail;
      allow update, delete: if request.auth.token.email == resource.data.adminEmail;
    }

    function isAdmin() {
      // In a real app, you might have a custom claim or a separate admin collection.
      // For now, we'll check against the admin email environment variable.
      // This function assumes you'll pass the admin email in the resource data for write operations,
      // which is not ideal but works as a starting point. A more secure approach is using custom claims.
      return request.auth.token.email == resource.data.adminEmail;
    }
  }
}
