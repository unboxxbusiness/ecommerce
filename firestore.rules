rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is the designated admin
    function isAdmin() {
      // The admin's email is stored in an environment variable in your app.
      // We check if the authenticated user's email matches that variable.
      return request.auth.token.email == get(/databases/$(database)/documents/config/env).data.NEXT_PUBLIC_ADMIN_EMAIL;
    }

    // Site Content: Public can read, only admin can write
    match /siteContent/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Config: A special document admins can read to help rules work.
    match /config/env {
      allow get: if isAdmin();
    }

    // Products: Public can read, only admin can write
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Orders: Customers can create and read their own. Admin can read/write all.
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.customerEmail == request.auth.token.email;
      allow read: if request.auth != null && (resource.data.customerEmail == request.auth.token.email || isAdmin());
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Customers: Users can read/update their own profile. Admin can manage all.
    match /customers/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null; // Signup creates this
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    // Coupons: Public can read active ones. Admin can manage all.
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || isAdmin();
      allow create, update, delete: if isAdmin();
    }
  }
}
