rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/customers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/customers/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the customer document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if incoming data only updates specific fields
    function isUpdatingAllowedCustomerFields() {
        return request.resource.data.diff(resource.data).affectedKeys()
               .hasOnly(['name', 'email', 'avatar', 'fcmTokens']);
    }

    // Products: Publicly readable, only writable by admins
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }

    // Orders:
    // - Customers can create their own orders.
    // - Customers can read their own orders.
    // - Admins can read and write all orders.
    match /orders/{orderId} {
      allow create: if request.auth.uid != null && request.resource.data.customerEmail == request.auth.token.email;
      allow read: if (request.auth.uid != null && resource.data.customerEmail == request.auth.token.email) || isAdmin();
      allow write: if request.auth != null && isAdmin();
    }

    // Customers:
    // - Users can create their own customer document (on signup).
    // - Users can read and update their own document.
    // - Admins can read and write any customer document.
    match /customers/{userId} {
       allow create: if request.auth.uid == userId;
       allow read, update: if (request.auth.uid != null && isOwner(userId) && isUpdatingAllowedCustomerFields()) || isAdmin();
       allow write: if request.auth != null && isAdmin();
    }
    
    // Coupons:
    // - Active coupons are readable by anyone (so they can be verified on the client).
    // - Only admins can create, update, or delete coupons.
    match /coupons/{couponId} {
      allow read: if resource.data.isActive == true || (request.auth != null && isAdmin());
      allow write: if request.auth != null && isAdmin();
    }
  }
}
