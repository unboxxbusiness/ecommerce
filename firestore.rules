
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user's UID exists in the 'admins' collection.
      // This is a secure way to check for roles, as this check happens on the backend.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Products can be read by anyone, but only written by admins.
    match /products/{productId} {
      allow read: if true;
      // Disallow all client-side writes. All writes must go through server actions.
      allow write: if false; 
    }

    // Orders can be read by the user who owns them or by admins.
    // Users can create new orders. Admins can update/delete.
    match /orders/{orderId} {
      allow read: if request.auth.uid != null && (resource.data.customerEmail == request.auth.token.email || isAdmin());
      // Allow authenticated users to create new orders.
      allow create: if request.auth.uid != null;
      // Disallow all other client-side writes.
      allow update, delete: if false;
    }

    // Customers can only access their own data. Admins can access any.
    match /customers/{userId} {
      // A user can read/write to their own document.
      allow read, update: if request.auth.uid == userId;
      // Allow new users to create their own customer document during signup.
      // This is essential for the signup flow.
      allow create: if request.auth.uid == userId
                    // Prevent users from assigning themselves an admin role on creation.
                    && !('role' in request.resource.data && request.resource.data.role == 'admin');
      // Admins have full access.
      allow get, list, write: if isAdmin();
    }
    
    // Coupons are readable by clients (to check validity) but only writable by admins.
    match /coupons/{couponId} {
        allow read: if request.auth.uid != null;
        // Disallow all client-side writes.
        allow write: if false;
    }
    
    // Published pages are public. All pages are manageable by admins.
    match /pages/{pageId} {
        allow read: if resource.data.isPublished == true || isAdmin();
        // Disallow all client-side writes.
        allow write: if false;
    }

    // FCM tokens are part of the customer document, handled by those rules.
    // No separate collection needed in this ruleset.

    // Admins collection can only be read/listed by other admins.
    match /admins/{adminId} {
        allow read, list: if isAdmin();
        // Disallow client-side creation of admins.
        allow create, update, delete: if false;
    }
    
    // Site content can only be written by an Admin.
    match /siteContent/{docId} {
        allow read: if true;
        // Disallow all client-side writes.
        allow write: if false;
    }
  }
}
