rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an administrator based on the 'role' field
    // in their corresponding customer document.
    function isAdmin() {
      return get(/databases/$(database)/documents/customers/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the requesting user is the owner of the data.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Products: Publicly readable, but only writable by administrators.
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Customers: Users can only read their own data. Only admins can create, update, or delete customer records.
    // The `use-auth.tsx` hook handles creating the initial customer document via a server action.
    match /customers/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create, delete: if isAdmin();
    }

    // Orders: Authenticated users can create orders. Users can only read their own orders.
    // Admins have full access.
    match /orders/{orderId} {
      allow create: if request.auth != null;
      allow read, update: if isAdmin() || (request.auth != null && request.resource.data.customerEmail == request.auth.token.email);
      allow delete: if isAdmin();
    }
    
    // Coupons: Can only be read and managed by admins.
    // The `getActiveCouponByCode` firestore rule handles client-side checks securely.
    match /coupons/{couponId} {
        allow read, write: if isAdmin();
    }

    // Pages: Published pages are publicly readable. Only admins can write.
    match /pages/{pageId} {
        allow read: if resource.data.isPublished == true || isAdmin();
        allow write: if isAdmin();
    }
    
    // Site Content: Publicly readable, but only writable by admins.
    match /siteContent/main {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
